version: '3.5'

networks:
  project: # <- change this for COMPOSE_PROJECT_NAME env variable value
    driver: overlay
    external: true

services:
  ### APP (PHP-FPM + NGINX) ##############################################
  app:
    container_name: ${COMPOSE_PROJECT_NAME}_app_local
    build:
      args:
        - IMAGE_REGISTRY_PATH=${IMAGE_REGISTRY_PATH}
        - COMPOSE_PROJECT_NAME=${REPOSITORY_NAME}
      context: .
      dockerfile: docker/app/Dockerfile_app_local
    image: ${IMAGE_REGISTRY_PATH}/${REPOSITORY_NAME}:${APP_IMAGE_TAG}
    volumes:
      - ${PROJECT_SOURCE_CODE_PATH}:${DOCKER_SOURCE_CODE_PATH}:cached
    networks:
      - ${COMPOSE_PROJECT_NAME}
    labels:
      - traefik.enable=true
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}

      - traefik.http.services.${COMPOSE_PROJECT_NAME}-app-service.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.rule=Host(`${APP_URI}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.entrypoints=http
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.service=${COMPOSE_PROJECT_NAME}-app-service
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.middlewares=https-redirect

      - traefik.http.services.secure-${COMPOSE_PROJECT_NAME}-app-service.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.rule=Host(`${APP_URI}`)
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.entrypoints=https
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.service=${COMPOSE_PROJECT_NAME}-app-service

      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.tls=true
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.tls.certresolver=le
    depends_on:
      - traefik
      - postgres
      - redis

  ### TRAEFIK (Edge Reverse Proxy) ##############################################
  traefik:
    image: traefik:v2.5.6
    container_name: ${COMPOSE_PROJECT_NAME}_traefik
    security_opt:
      - no-new-privileges:true
    ports:
     - ${TRAEFIK_WEB_PORT}:80
     - ${TRAEFIK_SECURE_WEB_PORT}:443
     - ${TRAEFIK_PORT}:8080
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:${TRAEFIK_WEB_PORT}
      - --entrypoints.https.address=:${TRAEFIK_SECURE_WEB_PORT}
      - --entrypoints.dashboard.address=:${TRAEFIK_PORT}

      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.le.acme.email=info@${APP_URI}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=http
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - ./data/traefik/letsencrypt:/letsencrypt
    networks:
      - ${COMPOSE_PROJECT_NAME}
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Use the traefik-public network (declared below)
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}

      # https-redirect middleware to redirect HTTP to HTTPS
      # It can be re-used by other stacks in other Docker Compose files
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true

      # traefik-http set up only to use the middleware to redirect to https
      # Uses the environment variable TRAEFIK_DOMAIN
      - traefik.http.routers.traefik-public-http.rule=Host(`${TRAEFIK_URI?Variable not set}`)
      - traefik.http.routers.traefik-public-http.entrypoints=http
      - traefik.http.routers.traefik-public-http.middlewares=https-redirect
      # traefik-https the actual router using HTTPS
      # Uses the environment variable TRAEFIK_DOMAIN
      - traefik.http.routers.traefik-public-https.rule=Host(`${TRAEFIK_URI?Variable not set}`)
      - traefik.http.routers.traefik-public-https.entrypoints=https
      - traefik.http.routers.traefik-public-https.tls=true
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-public-https.service=api@internal
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-public-https.tls.certresolver=le
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-public.loadbalancer.server.port=${TRAEFIK_PORT}
    restart: unless-stopped

  ### PostgreSQL ###########################################
  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    image: postgres:13.2-alpine
    command: postgres
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data:delegated
    ports:
      - ${DB_EXTERNAL_PORT}:5432
    networks:
      - ${COMPOSE_PROJECT_NAME}
    restart: always

  ### Redis ############################################
  redis:
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    image: redis:6.2.5-buster
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    networks:
      - ${COMPOSE_PROJECT_NAME}
    restart: always

#  ### MySQL ################################################
#  mysql:
#    image: registry.gitlab.com/flagstudio/laraflag:mysql-8.0-base
#    environment:
#      - MYSQL_DB=${DB_DATABASE}
#      - MYSQL_USER=${DB_USERNAME}
#      - MYSQL_PASSWORD=${DB_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
#    volumes:
#      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql:delegated
#    ports:
#      - ${DB_EXTERNAL_PORT}:3306
#    restart: always

   ### Meilisearch ###########################################
#  meilisearch:
#    container_name: ${COMPOSE_PROJECT_NAME}_meilisearch
#    image: getmeili/meilisearch:v0.24.0
#    volumes:
#      - ${DATA_PATH_HOST}/meilisearch:/data.ms
#    networks:
#      - ${COMPOSE_PROJECT_NAME}
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=${COMPOSE_PROJECT_NAME}
#
#      - traefik.http.services.${COMPOSE_PROJECT_NAME}-search-service.loadbalancer.server.port=${MEILISEARCH_PORT}
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-search-router.rule=Host(`${MEILISEARCH_URI}`)
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-search.entrypoints=http
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-search-router.service=${COMPOSE_PROJECT_NAME}-search-service
#    restart: always

  ### ElasticSearch ########################################
#  elasticsearch:
#    image: elasticsearch:7.10.1
#    volumes:
#      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
#    environment:
#      - bootstrap.memory_lock=true
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ports:
#      - 9200:9200
#      - ${ELASTICSEARCH_HOST_HTTP_PORT}:${ELASTICSEARCH_HOST_HTTP_PORT}
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    networks:
#      - ${COMPOSE_PROJECT_NAME}
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=${COMPOSE_PROJECT_NAME}
#
#      - traefik.http.services.${COMPOSE_PROJECT_NAME}-elastic-service.loadbalancer.server.port=${ELASTICSEARCH_HOST_HTTP_PORT}
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-elastic-router.rule=Host(`${ELASTICSEARCH_URI}`)
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-elastic.entrypoints=http
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-elastic-router.service=${COMPOSE_PROJECT_NAME}-elastic-service
#    restart: always

  ### MailHog ###########################################
#  mailhog:
#    image: mailhog/mailhog
#    logging:
#      driver: 'none'
#    networks:
#      - ${COMPOSE_PROJECT_NAME}
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=${COMPOSE_PROJECT_NAME}
#
#      - traefik.http.services.${COMPOSE_PROJECT_NAME}-mailhog-service.loadbalancer.server.port=${MAILHOG_UI_PORT}
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailhog-router.rule=Host(`${MAILHOG_UI_URI}`)
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailhog.entrypoints=http
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-mailhog-router.service=${COMPOSE_PROJECT_NAME}-mailhog-service
#    restart: always
