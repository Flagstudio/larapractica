version: '3.5'

networks:
  project: # <- change this for COMPOSE_PROJECT_NAME env variable value
    driver: overlay
    external: true
  traefik-public:
    external: true

services:
  ### APP (PHP-FPM + NGINX) ##############################################
  app:
    container_name: ${COMPOSE_PROJECT_NAME}_app_premaster
    image: "${IMAGE_REGISTRY_PATH}/${COMPOSE_PROJECT_NAME}:${APP_IMAGE_TAG}"
    volumes:
      - ./.env:/var/www/.env
      - ./storage:/var/www/storage
    networks:
      - traefik-public
      - ${COMPOSE_PROJECT_NAME}
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.middlewares=admin-auth

      - traefik.http.services.${COMPOSE_PROJECT_NAME}-app-service.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.rule=Host(`${APP_URI}`)
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.entrypoints=http
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.service=${COMPOSE_PROJECT_NAME}-app-service
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-app-router.middlewares=https-redirect

      - traefik.http.services.secure-${COMPOSE_PROJECT_NAME}-app-service.loadbalancer.server.port=${APP_PORT}
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.rule=Host(`${APP_URI}`)
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.entrypoints=https
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.service=${COMPOSE_PROJECT_NAME}-app-service

      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.tls=true
      - traefik.http.routers.secure-${COMPOSE_PROJECT_NAME}-app-router.tls.certresolver=le
    depends_on:
      - postgres
      - redis

  ### PostgreSQL ###########################################
  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    image: postgres:13.2-alpine
    command: postgres
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data:delegated
    ports:
      - ${DB_EXTERNAL_PORT}:5432
    networks:
      - ${COMPOSE_PROJECT_NAME}
    restart: always

  ### Redis ############################################
  redis:
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    image: redis:6.2.5-buster
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    networks:
      - ${COMPOSE_PROJECT_NAME}
    restart: always

  ### MySQL ################################################
#  mysql:
#    image: registry.gitlab.com/flagstudio/laraflag:mysql-8.0-base
#    environment:
#      - MYSQL_DB=${DB_DATABASE}
#      - MYSQL_USER=${DB_USERNAME}
#      - MYSQL_PASSWORD=${DB_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
#    volumes:
#      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql:delegated
#    restart: always

  ### Meilisearch ###########################################
#  meilisearch:
#    container_name: ${COMPOSE_PROJECT_NAME}_meilisearch
#    image: getmeili/meilisearch:v0.24.0
#    volumes:
#      - ${DATA_PATH_HOST}/meilisearch:/data.ms
#    networks:
#      - traefik-public
#      - ${COMPOSE_PROJECT_NAME}
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=${COMPOSE_PROJECT_NAME}
#
#      - traefik.http.services.${COMPOSE_PROJECT_NAME}-search-service.loadbalancer.server.port=${MEILISEARCH_PORT}
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-search-router.rule=Host(`${MEILISEARCH_URI}`)
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-search.entrypoints=http
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-search-router.service=${COMPOSE_PROJECT_NAME}-search-service
#    restart: always

  ### ElasticSearch ########################################
#  elasticsearch:
#    image: elasticsearch:7.10.1
#    volumes:
#      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
#    environment:
#      - bootstrap.memory_lock=true
#      - discovery.type=single-node
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    networks:
#      - traefik-public
#      - ${COMPOSE_PROJECT_NAME}
#    labels:
#      - traefik.enable=true
#      - traefik.docker.network=${COMPOSE_PROJECT_NAME}
#
#      - traefik.http.services.${COMPOSE_PROJECT_NAME}-elastic-service.loadbalancer.server.port=${ELASTICSEARCH_HOST_HTTP_PORT}
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-elastic-router.rule=Host(`${ELASTICSEARCH_URI}`)
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-elastic.entrypoints=http
#      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-elastic-router.service=${COMPOSE_PROJECT_NAME}-elastic-service
#    restart: always
