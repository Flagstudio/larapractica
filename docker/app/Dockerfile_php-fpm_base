# This is base image build in GitLab CI
ARG PHP_VERSION=8.1.1
FROM php:${PHP_VERSION}-fpm-buster

### Set the locale
RUN apt-get clean && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive \
    apt-get install -y \
    locales \
    && rm -rf /var/lib/apt/lists/*

# Locale
RUN sed -i -e \
  's/# ru_RU.UTF-8 UTF-8/ru_RU.UTF-8 UTF-8/' /etc/locale.gen \
   && locale-gen

ENV LANG ru_RU.UTF-8
ENV LANGUAGE ru_RU:ru
ENV LC_LANG ru_RU.UTF-8
ENV LC_ALL ru_RU.UTF-8
### Set Timezone
ENV TZ UTC
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && \
    echo UTC > /etc/timezone

RUN apt-get update --allow-releaseinfo-change -y \
    && apt-get install -y \
    software-properties-common \
    && apt-get update --allow-releaseinfo-change -y \
    && apt-get install -y \
    ffmpeg \
    libicu-dev \
    libxml2-dev \
    autoconf \
    apt-utils \
    zlib1g-dev \
    git \
    zip \
    libzip-dev \
    unzip \
    supervisor \
    cron \
    exiftool \
    exif \
    libwebp-dev \
    libjpeg62-turbo-dev \
    libfreetype6-dev \
    libgmp-dev \
    libpng-dev \
    libldap2-dev \
    netcat \
    sqlite3 \
    libsqlite3-dev \
    libc6 \
    libtinfo6 \
    readline-common \
    libreadline-dev \
    libpq-dev \
    wget \
    gnupg2 \
    mc \
    nano \
    && rm -rf /var/lib/apt/lists/*

RUN curl --silent -o - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
    && echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | tee  /etc/apt/sources.list.d/pgdg.list \
    && apt-get update -qq \
    && apt-get install -y \
      postgresql-client-13 \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /usr/src/php/ext/redis; \
    curl -fsSL --ipv4 https://github.com/phpredis/phpredis/archive/5.3.4.tar.gz | tar xvz -C "/usr/src/php/ext/redis" --strip 1; \
    docker-php-ext-install redis

RUN docker-php-ext-configure intl \
    && docker-php-ext-install intl \
    && docker-php-ext-enable intl

RUN git clone https://github.com/phpredis/phpredis.git /tmp/phpredis \
    && cd /tmp/phpredis \
    && git checkout -b release/5.3.4 \
    && phpize \
    && ./configure \
    && make \
    && make install \
    && rm -rf /tmp/phpredis

RUN docker-php-ext-configure gd  \
        --with-jpeg=/usr/include/ \
        --with-freetype=/usr/include/ && \
    docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql && \
    docker-php-ext-install bcmath gd mysqli pdo pdo_pgsql pdo_mysql pdo_sqlite zip gmp bcmath pcntl ldap sysvmsg exif zip pcntl soap && \
    docker-php-ext-enable pdo_mysql pdo_pgsql gd soap

###########################################################################
# Composer:
###########################################################################
COPY --from=composer:2.2.1 /usr/bin/composer /usr/bin/composer

###########################################################################
# ImageMagick:
###########################################################################

ARG IMAGEMAGICK_VERSION=latest
ENV IMAGEMAGICK_VERSION ${IMAGEMAGICK_VERSION}

RUN apt-get update --allow-releaseinfo-change -y \
    && apt-get install -yqq libmagickwand-dev imagemagick \
    && if [ $(php -r "echo PHP_MAJOR_VERSION;") = "8" ]; then \
      cd /tmp && \
      if [ ${IMAGEMAGICK_VERSION} = "latest" ]; then \
        git clone https://github.com/Imagick/imagick; \
      else \
        git clone --branch ${IMAGEMAGICK_VERSION} https://github.com/Imagick/imagick; \
      fi && \
      cd imagick && \
      phpize && \
      ./configure && \
      make && \
      make install && \
      rm -r /tmp/imagick; \
    else \
      pecl install imagick; \
    fi && \
    docker-php-ext-enable imagick; \
    php -m | grep -q 'imagick' \
    && rm -rf /var/lib/apt/lists/*

###########################################################################
# Node / NVM:
###########################################################################

# Check if NVM needs to be installed
ARG NODE_VERSION=16.13.1
ARG INSTALL_NODE=true
ARG INSTALL_NPM_VUE_CLI=false
ENV NVM_DIR /home/node/.nvm

RUN if [ ${INSTALL_NODE} = true ]; then \
    # Install nvm (A Node Version Manager)
    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash \
        && . $NVM_DIR/nvm.sh \
        && nvm install ${NODE_VERSION} \
        && nvm use ${NODE_VERSION} \
        && nvm alias ${NODE_VERSION} \
        && if [ ${INSTALL_NPM_VUE_CLI} = true ]; then \
        npm install -g @vue/cli \
        ;fi \
        && ln -s `npm bin --global` /home/node/.node-bin \
        # Wouldn't execute when added to the RUN statement in the above block
        # Source NVM when loading bash since ~/.profile isn't loaded on non-login shell
        && echo "" >> ~/.bashrc \
        && echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc \
        && echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm' >> ~/.bashrc \
;fi

# Add PATH for node
ENV PATH $PATH:/home/node/.node-bin

###########################################################################
# Nginx:
###########################################################################

RUN apt-get update --allow-releaseinfo-change && \
    DEBIAN_FRONTEND=noninteractive && \
    apt-get dist-upgrade -yq && \
    apt-get install -yq nginx && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    chown -R www-data:www-data /var/lib/nginx

COPY ./docker/app/sites/default.conf /etc/nginx/conf.d/default.conf
COPY ./docker/app/nginx.conf /etc/nginx/nginx.conf

###########################################################################
# Opcache:
###########################################################################

ARG PHP_FPM_INSTALL_OPCACHE=true

RUN if [ ${PHP_FPM_INSTALL_OPCACHE} = true ]; then \
    docker-php-ext-install opcache \
;fi

# Copy opcache configration
COPY ./docker/app/opcache.ini /usr/local/etc/php/conf.d/opcache.ini

###########################################################################
# Laravel Nova install:
###########################################################################

ARG NOVA_USERNAME
ARG NOVA_PASSWORD
ENV NOVA_USERNAME=$NOVA_USERNAME
ENV NOVA_PASSWORD=$NOVA_PASSWORD

RUN if [ ${NOVA_USERNAME} ] && [ ${NOVA_PASSWORD} ]; then \
composer global config http-basic.nova.laravel.com ${NOVA_USERNAME} ${NOVA_PASSWORD} \
    && echo "NOVA CREDENTIALS ARE SETS" \
    && echo ${NOVA_USERNAME} \
    && echo ${NOVA_PASSWORD} \
;fi

